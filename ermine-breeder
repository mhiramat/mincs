#!/bin/sh
#
# Copyright (C) 2016 Masami Hiramatsu <masami.hiramatsu@gmail.com>
# This program is released under the MIT License, see LICENSE.
#
set -e

abspath() {
  (cd $1; pwd)
}

# Workspaces
TOPDIR=`dirname $0`
TOPDIR=`abspath $TOPDIR`
WORKDIR=$TOPDIR/work
DLDIR=$TOPDIR/download
LIBEXEC=$TOPDIR/libexec
DESTDIR=$LIBEXEC/ermine

# Get the latest stable tree
get_latest_kernel_url() {
  case "$LINUX_BRANCH" in
    longterm)
    curl -s -L http://www.kernel.org/ | grep -m 1 -A 3 'longterm:' | tail -n 1 | cut -d\" -f 2
    ;;
    stable|master)
    curl -s -L http://www.kernel.org/ | grep -m 1 -A 1 'id="latest_link"' | tail -n 1 | cut -d\" -f 2
    ;;
    *)
    echo "Error: $LINUX_BRANCH is not supported to download"
    exit 1
    ;;
  esac
}

# Download sources
LINUX_URL=""
BUSYBOX_URL=git://git.busybox.net/busybox.git
LIBCAP_URL=https://github.com/mhiramat/libcap/archive/capsh-exec-v1.zip
UM_LINUX_URL=https://github.com/mhiramat/linux/archive/um-quiet.zip
IPTABLES_URL=http://www.netfilter.org/projects/iptables/files/iptables-1.6.1.tar.bz2
IPROUTE2_URL=https://www.kernel.org/pub/linux/utils/net/iproute2/iproute2-4.9.0.tar.xz

# Cross tools
GCC_arm64_URL=https://developer.arm.com/-/media/Files/downloads/gnu-a/8.2-2019.01/gcc-arm-8.2-2019.01-x86_64-aarch64-linux-gnu.tar.xz
#GCC_arm64_URL=https://developer.arm.com/-/media/Files/downloads/gnu-a/10.3-2021.07/binrel/gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu.tar.xz
CROSS_COMPILE_arm64=aarch64-linux-gnu-
GCC_arm_URL=https://developer.arm.com/-/media/Files/downloads/gnu-a/10.3-2021.07/binrel/gcc-arm-10.3-2021.07-x86_64-arm-none-eabi.tar.xz
CROSS_COMPILE_arm=arm-none-eabi-
#GCC_arm_URL=https://download.01.org/0day-ci/cross-package/gcc-11.2.0-nolibc/x86_64-gcc-11.2.0-nolibc_arm-linux-gnueabi.tar.xz
GCC_ppc64le_URL=arm-linux-gnueabi-
CROSS_COMPILE_ppc64le=powerpc64le-linux-gnu-
GCC_riscv_URL=riscv64-linux-gnu-
CROSS_COMPILE_riscv=riscv64-linux-gnu-
GCC_loongarch_URL=https://github.com/loongson/build-tools/releases/download/2022.08.11/loongarch64-clfs-5.1-cross-tools-gcc-glibc.tar.xz
CROSS_COMPILE_loongarch=loongarch64-unknown-linux-gnu-
GCC_s390x_URL=s390x-linux-gnu-
CROSS_COMPILE_s390x=s390x-linux-gnu-

# Build params
JOBS=`nproc`
JOBS=`expr $JOBS \* 2`
BUILD_MOD=no
BUILD_NET=no
INCREMENTAL=no
FORCE_KCONFIG=
CHECK_WARN=no
# master, stable and longterm for LINUX_URL=""
LINUX_BRANCH=master
LLVM_OPT=

# Dummy functions for additional configurations
user_configure_kernel() {
  return
}
user_configure_busybox() {
  return
}

cleanup_workdir() {
  rm -rf $WORKDIR
}
cleanup_dldir() {
  rm -rf $DLDIR
}
cleanup_destdir() {
  rm -rf $DESTDIR
}

prepare_workspaces() {
  mkdir -p $DLDIR
  mkdir -p $WORKDIR
  mkdir -p $DESTDIR
}

extract_source() { # file todir
 echo "Extracting $1"
 case $1 in
 *.tar*|*tgz)
   tar -xf $1 -C $2 --no-same-owner ;;
 *.zip)
   unzip -q -d $2 $1 ;;
 *)
   echo "$1 is not supported archive format."
   exit 1 ;;
 esac
}

download_source() { # url todir
  (cd $DLDIR
  target=${1##*/}
  if [ ! -f $target ]; then
    echo "Downloading $1"
    wget -c $1
  fi
  if [ ! -d $2 ]; then
    mkdir -p $2
    extract_source $target $2
  fi
  )
}

git_source() { # url todir [branch]
  if [ ! -d $2 ]; then
    mkdir $2
    OPT= ; [ "$3" ] && OPT="-b $3"
    (cd $2; git clone --depth=1 $OPT $1 )
  fi
}

file_source() { # url todir
  path=${1#*/}
  if [ ! -d $2 ]; then
    mkdir -p $2
    if [ -f $path ]; then
      extract_source $path $2
    elif [ -d $path ]; then
      echo "Link $path"
      ln -s $path $2/
    else
      echo "Error: File not found: $path" && exit 1
    fi
  fi
}

setup_source() { # url todir [branch]
  scheme=${1%%:/*}
  ext=${1##*.}
  [ $ext = "git" ] && scheme=git
  case $scheme in
  http|https|ftp)
    download_source $1 $2
    ;;
  git)
    git_source $1 $2 $3
    ;;
  file)
    file_source $1 $2
    ;;
  esac
}

kconfig_set() { # entry value
  sed -i "/.*CONFIG_${1}[= ].*/d" $OUTDIR/.config
  echo "CONFIG_${1}=${2}" >> $OUTDIR/.config
}

kconfig_string() { # entry string
  kconfig_set $1 \"$2\"
}

kconfigs_y() { # entries
  while [ $# -ne 0 ]; do
    kconfig_set ${1} y
    shift 1
  done
}

kconfigs_n() { # entries
  while [ $# -ne 0 ]; do
    kconfig_set ${1} n
    shift 1
  done
}

kconfigs_m() { # entries
  while [ $# -ne 0 ]; do
    kconfig_set ${1} m
    shift 1
  done
}

configure_kernel() { # outdir
  make defconfig O=$1 $LLVM_OPT
  user_configure_kernel $1
  kconfig_string DEFAULT_HOSTNAME "ermine"
  # fundamental features
  kconfigs_y NET NET_CORE NETDEVICES TTY INET IP_PNP IP_PNP_DHCP BINFMT_ELF
  # config minc related configs
  kconfigs_y OVERLAY_FS NAMESPACES UTS_NS IPC_NS USER_NS PID_NS NET_NS \
    CGROUPS EVENTFD CGROUP_DEVICE CPUSETS CGROUP_CPUACCT \
    PAGE_COUNTER MEMCG MEMCG_SWAP MEMCG_SWAP_ENABLED MEMCG_KMEM \
    CGROUP_PERF CGROUP_SCHED CGROUP_HUGETLB FAIR_GROUP_SCHED \
    CGROUP_PIDS CGROUP_FREEZER CFS_BANDWIDTH RT_GROUP_SCHED \
    BLK_CGROUP EXPORTFS

  if [ "$BUILD_NET" = yes ]; then
    # config minc-dens configs
    kconfigs_y VETH IPV6 BRIDGE NETFILTER \
      NETFILTER_ADVANCED NETFILTER_XTABLES NETFILTER_INGRESS \
      NETFILTER_NETLINK NETFILTER_NETLINK_ACCT \
      BRIDGE_NF_EBTABLES BRIDGE_EBT_T_NAT BRIDGE_EBT_DNAT \
      IP_NF_NAT IP_NF_IPTABLES IP_NF_FILTER IP_NF_TARGET_REDIRECT \
      IP_NF_TARGET_MASQUERADE \
      NF_NAT_IPV4 NF_NAT_REDIRECT NF_NAT_MASQUERADE_IPV4 NF_CONNTRACK \
      NF_CONNTRACK_IPV4 \
      NF_TABLES NFT_NAT NFT_MASQ NFT_MASQ_IPV4 NFT_REJECT NFT_REDIR \
      NFT_REJECT_INET NFT_REJECT_IPV4 \
      NETFILTER_XT_CONNMARK NETFILTER_XT_NAT NETFILTER_XT_MATCH_CONNTRACK \
      NETFILTER_XT_MATCH_ADDRTYPE NETFILTER_XT_MATCH_STATE
  fi

  if [ $ARCH = um ]; then
    # config user mode linux configs
    kconfigs_y HOSTFS UML_NET UML_NET_TUNTAP PTY_CHAN NULL_CHAN TTY_CHAN \
	    BINFMT_MISC BLOCK BLK_DEV BLK_DEV_INITRD
    kconfigs_n BLK_DEV_UBD
  else
    # config kvm configs (for older arm/arm64 kernels)
    kconfigs_y VIRTUALIZATION HYPERVISOR_GUEST PARAVIRT KVM_GUEST \
      PCI PCI_MSI VIRTIO BLOCK BLK_DEV BLK_DEV_INITRD \
      VIRTIO_PCI VIRTIO_BLK VIRTIO_CONSOLE VIRTIO_NET VIRTIO_INPUT \
      NETWORK_FILESYSTEMS NET_9P NET_9P_VIRTIO 9P_FS 9P_FS_POSIX_ACL \
      PCI_HOST_GENERIC PCI_HOST_GENERIC HW_RANDOM_VIRTIO
  fi
  if [ $ARCH = arm -o $ARCH = arm64 ]; then
    kconfigs_y ARM_AMBA SERIAL_AMBA_PL011 SERIAL_AMBA_PL011_CONSOLE \
	    RTC_DRV_PL031 RTC_HCTOSYS
  elif [ $ARCH = x86_64 -o $ARCH = i386 ]; then
    kconfigs_y SERIAL_8250 SERIAL_8250_CONSOLE
  fi
  make olddefconfig O=$1 $LLVM_OPT
}

force_configure_kernel() { # outdir
  mkdir -p $1
  echo "Use $FORCE_KCONFIG as kconfig forcibly"
  if [ "$BUILD_MOD" = no ]; then
    cat $FORCE_KCONFIG | sed s/=m$/=n/ > $1/.config
  else
    cat $FORCE_KCONFIG > $1/.config
  fi
  make olddefconfig O=$1 $LLVM_OPT
}

make_cmd() {
  if [ $CHECK_WARN = yes ]; then
    make $* W=1	2>&1 | tee build.log
  else
    make $*
  fi 
}

build_kernel() { # workdir rebuild
  VMLINUZ=$DESTDIR/vmlinuz.$ARCH
  export OUTDIR=$1/build-${ARCH}/
  export KBUILD_DIR=$OUTDIR
  export KERNEL_DIR=$1/linux*/
  [ -f $VMLINUZ -a "$2" -eq 0 ] && return 0
  [ "$2" -ne 0 -a "$INCREMENTAL" = "no" ] && rm -rf $OUTDIR
  (cd $1/linux*/
  if [ -f "$FORCE_KCONFIG" ]; then
    force_configure_kernel $OUTDIR
  else
    configure_kernel $OUTDIR
  fi
  if [ "$BUILD_MOD" = no ]; then
    MOD_OPT=""
  else
    MOD_OPT="modules"
  fi

  case $ARCH in
    x86_64|i386)
    make_cmd bzImage $MOD_OPT -j $JOBS O=$OUTDIR $LLVM_OPT
    cp -f $OUTDIR/arch/x86/boot/bzImage $VMLINUZ
    ;;
    arm)
    make_cmd zImage $MOD_OPT -j $JOBS O=$OUTDIR $LLVM_OPT
    cp -f $OUTDIR/arch/arm/boot/zImage $VMLINUZ
    ;;
    arm64)
    make_cmd Image.gz $MOD_OPT -j $JOBS O=$OUTDIR $LLVM_OPT
    cp -f $OUTDIR/arch/arm64/boot/Image.gz $VMLINUZ
    ;;
    um)
    make_cmd vmlinux $MOD_OPT -j $JOBS O=$OUTDIR $LLVM_OPT
    cp -f $OUTDIR/vmlinux $VMLINUZ
    strip $VMLINUZ
    ;;
    powerpc)
    make_cmd all -j $JOBS O=$OUTDIR $LLVM_OPT
    cp -f $OUTDIR/arch/powerpc/boot/zImage.pseries $VMLINUZ
    ;;
    riscv)
    make_cmd all -j $JOBS O=$OUTDIR $LLVM_OPT
    cp -f $OUTDIR/arch/riscv/boot/Image $VMLINUZ
    ;;
    loongarch)
    make_cmd all -j $JOBS O=$OUTDIR $LLVM_OPT
    cp -f $OUTDIR/arch/loongarch/boot/Image $VMLINUZ
    ;;
    s390)
    make_cmd all -j $JOBS O=$OUTDIR $LLVM_OPT
    cp -f $OUTDIR/arch/s390/boot/bzImage $VMLINUZ
    ;;
  esac
  )
}

build_module() { # workdir rootfsdir
  export OUTDIR=$1/build-${ARCH}/
  mkdir -p $2/lib/modules
  rm -rf $2/lib/modules/*
  (cd $1/linux*/
  INSTALL_MOD_PATH=$2 make modules_install -j $JOBS O=$OUTDIR
  )
}

build_busybox() { # workdir rootfsdir
  [ -d $2 ] && return 0
  (cd $1/busybox*/
  OUTDIR=`pwd`
  make defconfig
  user_configure_busybox
  kconfigs_y STATIC
  kconfigs_n HUSH CONFIG_BASH_IS_NONE
  kconfigs_y ASH CONFIG_SH_IS_ASH CONFIG_BASH_IS_ASH
  if [ "$BUILD_NET" = yes ] ; then
    # Since we will use iproute2 package
    kconfigs_n IP IPADDR IPLINK IPROUTE IPTUNNEL IPRULE IPNEIGH
  fi
  # This might be x86-64 host only
  if [ "$ARCH" = i386 ]; then
    kconfig_string EXTRA_CFLAGS "-m32"
    kconfig_string EXTRA_LDFLAGS "-m32"
  fi
  make busybox -j $JOBS
  make install
  cp -R _install $2
  )
}

build_libcap() { # workdir rootfsdir
  [ -f $2/usr/sbin/capsh ] && return 0
  (cd $1/libcap*/
  make clean
  CC=${CROSS_COMPILE}gcc
  # This might be x86-64 host only
  if [ "$ARCH" = i386 ]; then
    CC="$CC -m32"
  fi
  make DYNAMIC=no BUILD_CC=gcc CC="${CC}" BUILD_GPERF=no
  mkdir -p $2/usr/sbin/
  cp progs/capsh $2/usr/sbin/
  ${CROSS_COMPILE}strip $2/usr/sbin/capsh
  )
}

build_iptables() { # workdir rootfsdir
  [ -f $2/sbin/iptables ] && return 0
  (cd $1/iptables*/
  [ -f Makefile ] && make clean ||:
  ./configure --disable-nftables --disable-ipv6 --disable-devel \
    --disable-shared --enable-static --without-pic \
    --with-kernel=$KERNEL_DIR --with-kbuild=$KBUILD_DIR \
    --target=${CROSS_COMPILE%*-} --host=${CROSS_COMPILE%*-} --prefix=/
  make CFLAGS="-static" LDFLAGS="-all-static"
  make install-strip DESTDIR=$2
  )
}

build_iproute2() { # workdir rootfsdir
  [ -L $2/sbin/ip ] && rm $2/sbin/ip
  [ -f $2/sbin/ip ] && return 0
  (cd $1/iproute2*/
  make clean
  rm -f */static-syms.o */static-syms.h
  export CC=${CROSS_COMPILE}gcc
  export AR=${CROSS_COMPILE}ar
  ./configure
  export CFLAGS="-static"
  export LDFLAGS="-static"
  make LIBDIR=$GCCLIBDIR SHARED_LIBS=n TC_CONFIG_ELF=n HAVE_SELINUX=n HAVE_LATEX=n HAVE_BERKELEY_DB=n -j $JOBS
  set -xv
  cp -f ip/ip $2/sbin/ip
  ${CROSS_COMPILE}strip $2/sbin/ip
  )
}

install_mincs() { # rootfsdir
  (cd $TOPDIR
  PREFIX=$1/usr/ LIBEXEC=/usr/libexec ./install.sh
  rm -rf $1/usr/libexec/ermine
  )
}

setup_rootfs() { # rootfsdir
  (cd $1
  mkdir -p dev sys proc mnt tmp etc var/run
  chmod 1777 tmp

  cat > etc/rc.local << EOF
#!/bin/sh
mount -t devtmpfs dev /dev 2> /dev/null
mount -t proc proc /proc
mount -t sysfs sysfs /sys
mount -t tmpfs tmpfs /tmp
mount -t tmpfs tmpfs /sys/fs/cgroup/
mount -t debugfs debugfs /sys/kernel/debug ||:
mount -t tracefs tracefs /sys/kernel/tracing ||:

mkdir /sys/fs/cgroup/cpu
mount -t cgroup -o cpu cgroup /sys/fs/cgroup/cpu
mkdir /sys/fs/cgroup/memory
mount -t cgroup -o memory cgroup /sys/fs/cgroup/memory

ip link set lo up
EOF
  chmod a+x etc/rc.local

  cat > mincshell.sh << EOF
#!/bin/sh
mount_host() {
  if grep -q hostfs /proc/filesystems ; then
    mount -t hostfs -o sync,/ minc /mnt
  else
    mount -t 9p -o trans=virtio,version=9p2000.L,posixacl,cache=none minc /mnt
  fi
  return $?
}

run_minc() {
if mount_host; then
  if [ -f /mnt/run.sh ]; then
    /bin/cttyhack sh /mnt/run.sh
    exec poweroff
  fi
fi
}

# Linewrap setup
resize > /dev/null 2>&1
printf %b '\033[?7h'

mount | grep -q /mnt || run_minc
echo "=== Ermine operating console ==="
echo "To exit the ermine OS, please run 'poweroff' command"
echo
exec /bin/sh
EOF
  chmod a+x mincshell.sh

  cat > etc/inittab << EOF
::sysinit:/etc/rc.local
::restart:/sbin/init
::ctrlaltdel:/sbin/reboot
${QEMU_TTY}::respawn:/bin/cttyhack /mincshell.sh
EOF

  cat > etc/hosts << EOF
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
EOF

  ln -sf /sbin/init init
)
}

pack_initramfs() { # rootfsdir
  (cd $1
   find . | cpio -H newc -o | gzip > $DESTDIR/initramfs.$ARCH
  )
}

# Include prepare_arch and minc_moult
. $LIBEXEC/minc-moult

enable_network() {
  . $LIBEXEC/minc-dens
  mkmincbr
  :;: 'Setup ip addr for ermine kernel';:
  export MINC_NETNSIF="tap-minc$$"
  TRAPCMD="delmincip $MINC_NETNSIF; $TRAPCMD"
  trap "$TRAPCMD" EXIT
  setmincip $MINC_NETNSIF
  MINC_KERNEL_OPT="ip=$MINC_IP::$MINC_GWIP:$MINC_NETMASK::eth0::8.8.8.8:"
}

test_run() {
  while [ $# -ge 1 ]; do
  case $1 in
    --debug)
    set -vx
    shift 1
    ;;
    --arch)
    ARCH=$2
    shift 2
    ;;
    --work)
    WORKDIR=`abspath $2`
    shift 2
    ;;
    --net)
    enable_network
    shift 1
    ;;
    --cmdline)
    OPT_CMDLINE=$2
    shift 2
    ;;
    *)
    break;;
  esac
  done

  prepare_arch "$ARCH" # to get QEMU_TTY

  QEMU_OPT="$@"	# minc_moult calls prepare_arch to setup QEMU_OPT again.
  (minc_moult "$ARCH" $WORKDIR \
	  "ro console=${QEMU_TTY} ${MINC_KERNEL_OPT} ${OPT_CMDLINE}")
  setterm --linewrap on
}

run_selfbuild() {
  if [ -d "$1" ]; then
    echo "Use $1 as a new world"
    NEWDIR=$1
    shift 1
  else
    echo "Making a new world: it may take a while"
    mkdir -p $WORKDIR/debian
    sudo debootstrap --include=wget,build-essential,git,gawk,cpio,bc,unzip jessie\
         $WORKDIR/debian
    NEWDIR=$WORKDIR/debian
  fi
  ${TOPDIR}/minc --nopriv $NEWDIR -b ${TOPDIR}:/opt /opt/ermine-breeder build $@
}

usage() {
  cat << EOF
Usage: $0 <CMD> [OPTS]

 commands:
  build 	Build ermine by using host toolchain (default)
  clean 	Cleanup workdir
  distclean	Cleanup workdir, download and ermine image
  selfbuild [DIR] [OPTS]
		Setup new rootfs and build (will need sudo)
  testrun [--arch <ARCH>] [--work <DIR>]
		Run qemu with ermine image
  help  	Show this message

 options:
    --arch <ARCH>
		Build ermine for ARCH (x86_64, arm, arm64)
    --repack	Rebuild ermine image without cleanup workdir
    --rebuild	Rebuild ermine image with cleanup workdir
    --config [CONF_FILE]
		Use CONF_FILE for config
    --debug	Show all commands (set -x)

EOF
  exit 0
}

[ $# -ne 0 ] && case "$1" in
  clean)
  cleanup_workdir
  exit 0
  ;;
  distclean)
  cleanup_workdir
  cleanup_dldir
  cleanup_destdir
  exit 0
  ;;
  selfbuild)
  shift 1
  run_selfbuild $*
  exit 0
  ;;
  testrun)
  shift 1
  test_run "$@"
  exit 0
  ;;
  build|-*)
  [ "$1" = build ] && shift 1
  ;;
  *)
  usage
  ;;
esac

CONFIG=
REBUILD_KERNEL=0
while [ $# -ne 0 ]; do
case $1 in
  --repack)
  cleanup_destdir
  ;;
  --rebuild)
  cleanup_workdir
  cleanup_destdir
  ;;
  --rebuild-kernel)
  REBUILD_KERNEL=1
  ;;
  --config|-c)
  CONFIG="$CONFIG $2"
  shift 1
  ;;
  --arch)
  ARCH=$2
  shift 1
  ;;
  --debug)
  set -x
  ;;
  *)
  usage
esac
shift 1
done


if [ "$ARCH" = all ]; then
  [ "$CONFIG" ] && CONFOPT=`echo "$CONFIG" | xargs echo " --config " `
  $0 --arch x86_64 $CONFOPT
  $0 --arch arm $CONFOPT
  $0 --arch arm64 $CONFOPT
  $0 --arch um $CONFOPT
  exit $?
fi

# User config
if [ -z "$CONFIG" ]; then
  [ -f $TOPDIR/ermine.config ] && . $TOPDIR/ermine.config
else
  for conf in $CONFIG; do
    . $conf
  done
fi

LINUXDIR=$WORKDIR/linux
BUSYBOXDIR=$WORKDIR/busybox
LIBCAPDIR=$WORKDIR/libcap
IPTABLESDIR=$WORKDIR/iptables
IPROUTE2DIR=$WORKDIR/iproute2
ROOTFSDIR=$WORKDIR/rootfs

prepare_arch $ARCH
export ARCH
case "$ARCH" in
  x86_64)
  export CROSS_COMPILE=
  if [ $HOSTARCH != $ARCH ]; then
    echo "Sorry, $ARCH does not support cross build."
    exit 1
  fi
  ;;
  i386|um)
  export CROSS_COMPILE=
  GCC_URL=
  ;;
  arm)
  export CROSS_COMPILE=$CROSS_COMPILE_arm
  GCC_URL=$GCC_arm_URL
  ;;
  arm64)
  export CROSS_COMPILE=$CROSS_COMPILE_arm64
  GCC_URL=$GCC_arm64_URL
  ;;
  powerpc)
  export CROSS_COMPILE=$CROSS_COMPILE_ppc64le
  GCC_URL=
  ;;
  riscv|riscv64) # riscv means riscv64 for linux
  export CROSS_COMPILE=$CROSS_COMPILE_riscv
  GCC_URL=
  ;;
  loongarch|loongarch64)
  export CROSS_COMPILE=$CROSS_COMPILE_loongarch
  GCC_URL=$GCC_loongarch_URL
  ;;
esac

prepare_workspaces

if [ $HOSTARCH != $ARCH ]; then
  ROOTFSDIR=$WORKDIR/rootfs-$ARCH
fi

if [ -n "$GCC_URL" ]; then
  GCCDIR=$WORKDIR/gcc-$ARCH
  setup_source $GCC_URL $GCCDIR
  GCCBINDIR=`ls -d $GCCDIR/*/bin` || GCCBINDIR=`ls -d $GCCDIR/*/*/bin`
  export GCCLIBDIR="${GCCBINDIR%/bin}/${CROSS_COMPILE%-}/libc/usr/lib"
  export PATH="$PATH:"$GCCBINDIR
else
  export GCCLIBDIR="/usr/lib"
fi

#TODO: After the um-quiet patchset merged to stable, this should be removed
if [ "$ARCH" = "um" ]; then
  LINUX_URL=$UM_LINUX_URL
  echo "Note: LINUX_URL is replaced by $UM_LINUX_URL, since um-quiet series is not merged yet."
elif [ -z "$LINUX_URL" ]; then
  # Setup the latest kernel url here to avoid accessing kernel.org for testrun
  LINUX_URL=`get_latest_kernel_url`
fi
setup_source $LINUX_URL $LINUXDIR $LINUX_BRANCH
setup_source $BUSYBOX_URL $BUSYBOXDIR
setup_source $LIBCAP_URL $LIBCAPDIR
if [ "$BUILD_NET" = yes ] ; then
  setup_source $IPTABLES_URL $IPTABLESDIR
  setup_source $IPROUTE2_URL $IPROUTE2DIR
fi

echo "Kernel build"
build_kernel $LINUXDIR $REBUILD_KERNEL

echo "busybox build"
build_busybox $BUSYBOXDIR $ROOTFSDIR

echo "libcap build"
build_libcap $LIBCAPDIR $ROOTFSDIR

if [ "$BUILD_NET" = "yes" ]; then
  build_iptables $IPTABLESDIR $ROOTFSDIR
  build_iproute2 $IPROUTE2DIR $ROOTFSDIR
fi

if [ "$BUILD_MOD" = "yes" ]; then
  echo "kernel module install"
  build_module $LINUXDIR $ROOTFSDIR
fi

echo "install MINCS"
install_mincs $ROOTFSDIR

echo "setup rootfs"
setup_rootfs $ROOTFSDIR

echo "pack initramfs"
pack_initramfs $ROOTFSDIR

ls -sh $DESTDIR
echo "Done"

exit 0
